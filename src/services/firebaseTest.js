// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
import { auth, db } from '../firebase';
import { collection, addDoc } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';

export const testFirebaseConnection = () => {
  console.log('üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Auth
  onAuthStateChanged(auth, (user) => {
    if (user) {
      console.log('‚úÖ Auth —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.uid);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º Firestore
      testFirestore(user.uid);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
  });
};

const testFirestore = async (userId) => {
  try {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Firestore...');
    
    const testDoc = {
      test: true,
      userId: userId,
      timestamp: new Date(),
      message: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
    };
    
    const docRef = await addDoc(collection(db, 'test'), testDoc);
    console.log('‚úÖ Firestore —Ä–∞–±–æ—Ç–∞–µ—Ç! ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:', docRef.id);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Firestore:', error);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
  }
};