import React, { useState } from 'react';
import { addDoc, collection } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import { X } from 'lucide-react';

export default function AddTransactionModal({ isOpen, onClose, categories }) {
  const { currentUser } = useAuth();
  const [formData, setFormData] = useState({
    type: 'expense',
    amount: '',
    category: '',
    description: '',
    owner: 'artur',
    date: new Date().toISOString().split('T')[0]
  });
  const [loading, setLoading] = useState(false);

  if (!isOpen) return null;

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser?.uid);
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

    if (!currentUser) {
      alert('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (!formData.amount || !formData.category) {
      alert('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è (—Å—É–º–º–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è)');
      return;
    }

    try {
      setLoading(true);

      const transactionData = {
        type: formData.type,
        amount: parseFloat(formData.amount),
        category: formData.category,
        description: formData.description || '',
        owner: formData.owner,
        userId: currentUser.uid,
        createdAt: new Date(),
        date: new Date(formData.date)
      };
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ Firebase:', transactionData);
      
      const docRef = await addDoc(collection(db, 'transactions'), transactionData);
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:', docRef.id);
      alert('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        type: 'expense',
        amount: '',
        category: '',
        description: '',
        owner: 'artur',
        date: new Date().toISOString().split('T')[0]
      });
      onClose();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
      console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      
      if (error.code === 'permission-denied') {
        alert('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase Security Rules.');
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É
  const filteredCategories = categories.filter(cat => {
    if (formData.type === 'income') {
      return cat.type === 'income' || ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'].includes(cat.name);
    } else {
      return cat.type === 'expense' || !['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'].includes(cat.name);
    }
  });

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="card max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-white/20">
          <h2 className="text-xl font-semibold text-white">
            –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
          </h2>
          <button
            onClick={onClose}
            className="text-gray-300 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {/* –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                type="button"
                onClick={() => setFormData({...formData, type: 'expense', category: ''})}
                className={`p-3 rounded-lg border-2 transition-colors ${
                  formData.type === 'expense'
                    ? 'border-red-300 bg-red-50 text-red-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                –†–∞—Å—Ö–æ–¥
              </button>
              <button
                type="button"
                onClick={() => setFormData({...formData, type: 'income', category: ''})}
                className={`p-3 rounded-lg border-2 transition-colors ${
                  formData.type === 'income'
                    ? 'border-green-300 bg-green-50 text-green-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                –î–æ—Ö–æ–¥
              </button>
            </div>
          </div>

          {/* –í–ª–∞–¥–µ–ª–µ—Ü */}
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              –í–ª–∞–¥–µ–ª–µ—Ü
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                type="button"
                onClick={() => setFormData({...formData, owner: 'artur'})}
                className={`p-3 rounded-lg border-2 transition-colors ${
                  formData.owner === 'artur'
                    ? 'border-blue-300 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                –ê—Ä—Ç—É—Ä
              </button>
              <button
                type="button"
                onClick={() => setFormData({...formData, owner: 'valeria'})}
                className={`p-3 rounded-lg border-2 transition-colors ${
                  formData.owner === 'valeria'
                    ? 'border-purple-300 bg-purple-50 text-purple-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                –í–∞–ª–µ—Ä–∏—è
              </button>
            </div>
          </div>

          {/* –°—É–º–º–∞ */}
          <div>
            <label className="block text-sm font-medium text-white mb-1">
              –°—É–º–º–∞ (‚ÇΩ)
            </label>
            <input
              type="number"
              name="amount"
              value={formData.amount}
              onChange={handleInputChange}
              className="input-field"
              required
              min="0"
              step="0.01"
              placeholder="0.00"
            />
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div>
            <label className="block text-sm font-medium text-white mb-1">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </label>
            <select
              name="category"
              value={formData.category}
              onChange={handleInputChange}
              className="input-field"
              required
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
              {filteredCategories.map(cat => (
                <option key={cat.id} value={cat.name}>
                  {cat.name}
                </option>
              ))}
            </select>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-white mb-1">
              –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <input
              type="text"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              className="input-field"
              placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            />
          </div>

          {/* –î–∞—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium text-white mb-1">
              –î–∞—Ç–∞
            </label>
            <input
              type="date"
              name="date"
              value={formData.date}
              onChange={handleInputChange}
              className="input-field"
              required
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 btn-secondary"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex-1 btn-primary"
            >
              {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}